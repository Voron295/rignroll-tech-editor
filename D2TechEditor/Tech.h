#include <string>

struct CVector2D
{
	float x;
	float y;
};

struct CVector
{
	float x;
	float y;
	float z;
};

struct CMatrix
{
	CVector right;
	CVector top;
	CVector at;
	CVector pos;
};

#pragma pack(push, 1)
struct TechData
{
	CMatrix matrix;
	CMatrix field_30;
	float mass;
	float rwheel;
	float rwheel1;
	float tank;
	float fuelTimeEndurance;
	float field_74;
	float field_78;
	float field_7C;
	float field_80;
	float field_84;
	float field_88;
	float field_8C;
	int gearsCount;
	int field_94;
	int field_98;
	float field_9C;
	float fuelConsumption;
	float field_A4;
	float kilometrage;
	float air_press_coeff;
	float air_resist_coeff;
	float air_side_resist_coeff;
	float front_wheel_thickness;
	float rear_wheel_thickness;
	float maxrotmomentum;
	float field_C4;
	float breakpower;
	float rear_axle_coeff;
	float reverse_trans_coeff;
	float gear_trans_coeff[14];
	float tach_with_max_power;
	float cargo_and_body_pick_load;
	float body_mass;
	float body_height;
	float body_square;
	CVector center_of_cargo_bottom;
	int driving_wheels[8];
	int steering_wheels[8];
	int touching_road_wheels[8];
	CVector OV;
	float tangViewer;
	CVector I;
	CVector rs0;
	CVector rs1;
	CVector rs2;
	CVector rs3;
	int field_1D8;
	float field_1DC;
	float field_1E0;
	int field_1E4;
	int field_1E8;
	int field_1EC;
	int field_1F0;
	int field_1F4;
	int field_1F8;
	int field_1FC;
	int field_200;
	int field_204;
	int field_208;
	int field_20C;
	int field_210;
	int field_214;
	int field_218;
	int field_21C;
	int field_220;
	int field_224;
	int field_228;
	int field_22C;
	int field_230;
	int field_234;
	int field_238;
	int field_23C;
	int field_240;
	int field_244;
	int field_248;
	int field_24C;
	int field_250;
	int field_254;
	int field_258;
	int field_25C;
	int field_260;
	int field_264;
	int field_268;
	int field_26C;
	int field_270;
	int field_274;
	int field_278;
	int field_27C;
	int field_280;
	int field_284;
	int field_288;
	int field_28C;
	int field_290;
	int field_294;
	int field_298;
	int field_29C;
	int field_2A0;
	int field_2A4;
	int field_2A8;
	int field_2AC;
	int field_2B0;
	int field_2B4;
	int field_2B8;
	int field_2BC;
	int field_2C0;
	int field_2C4;
	int field_2C8;
	int field_2CC;
	int field_2D0;
	int field_2D4;
	int field_2D8;
	int field_2DC;
	int field_2E0;
	int field_2E4;
	int field_2E8;
	float suspension[8];
	float ks[8];
	float _cs[8];
	float CollisionRadius;
	CVector CollisionCenter;
	int isCenterB3DMassUndefined;
	float rubber_collision_coeff;
	float slide_collision_coeff;
	int Corner_Mark_Count;
	int AddColPntsCount;
	CVector Corner_Mark[20];
	CVector AddColPnts[20];
	CVector field_550;
	CVector field_55C;
	CVector field_568;
	int Corner_Mark_WCount;
	CVector Corner_Mark_W[4];
	float CollisionPlane[4];
	CVector field_5B8;
	CVector field_5C4;
	CVector field_5D0;
	CVector field_5DC;
	int field_5E8;
	int field_5EC;
	int field_5F0;
	int field_5F4;
	int field_5F8;
	int field_5FC;
	int field_600;
	int field_604;
	int field_608;
	int field_60C;
	int field_610;
	int field_614;
	int field_618;
	int field_61C;
	int field_620;
	int field_624;
	int field_628;
	int field_62C;
	int field_630;
	int field_634;
	int field_638;
	int field_63C;
	int field_640;
	int field_644;
	int field_648;
	int field_64C;
	int field_650;
	int field_654;
	int field_658;
	int field_65C;
	int field_660;
	int field_664;
	int field_668;
	int field_66C;
	int field_670;
	int field_674;
	int field_678;
	int field_67C;
	int field_680;
	int field_684;
	int field_688;
	int field_68C;
	int field_690;
	int field_694;
	int field_698;
	int field_69C;
	int field_6A0;
	int field_6A4;
	int field_6A8;
	int field_6AC;
	int field_6B0;
	int field_6B4;
	int field_6B8;
	int field_6BC;
	int field_6C0;
	int field_6C4;
	int field_6C8;
	int field_6CC;
	int field_6D0;
	int field_6D4;
	int field_6D8;
	int field_6DC;
	int field_6E0;
	int field_6E4;
	int field_6E8;
	float maxCornerDist;
	float field_6F0;
	CVector tvCameraPosition[5];
	int tvCameraPositionCount;
	CVector tvCameraRightConer;
	CVector SmokePosition;
	CVector SmokeDirection;
	CVector SmokePosition2;
	CVector SmokeDirection2;
	CVector flame_place;
	CVector Fara_FL;
	CVector Fara_FR;
	CVector Fara_BLs;
	CVector Fara_BRs;
	CVector Fara_BL;
	CVector Fara_BR;
	int horse_power;
	int price;
	int glowwing;
	CVector lowSaddle;
	CVector topSaddle;
	CVector TowHook;
	CVector Coupler;
	float shiftSaddle;
	float CouplerLength;
	CVector2D SpeedScale;
	CVector2D TachScale;
	float FuelScale;
	CVector CabRWindow;
	CVector CabLWindow;
	float CabFrontWindow[4];
	float Drivers_neck_Angles[7];
	int field_860;
	int field_864;
	char cockpit_space[60];
	char fileName[30];
	char field_8C2[30];
	char field_8E0[30];
	char prefix[20];
	char prefixCab[20];
	char car_node[20];
	int field_93A;
	int field_93E;
	int field_942;
	__int16 field_946;
	int trailer_type;
	CVector Fara_Dir[2];
	CVector Fara_Width;
};
#pragma pack(pop)

struct FieldType
{
	int size;
	BYTE type;
	DWORD offset;
};

class TechFile
{
public:
	FILE *m_pFile;
	TCHAR *m_sFileName;
	
	struct {
		int len;
		char *filename;
		DWORD dup0;
		DWORD size;
		DWORD count;
		DWORD dup[7];
		TechData techData[80];
		DWORD *dup2;
		
		DWORD addSize;
		DWORD addCount;
		DWORD dup3[7];
		BYTE techDataAdd[0x36C][0x23];

	} m_pFileData;

	HWND cb;
	HWND lb;
	HWND *arr;
	HWND lbl;

	int currentItem;
	std::string currentField;

	TechFile();
	~TechFile();

	static TechFile *gTechFile;
	static void Init();

	static bool LoadTech(TCHAR *filename, HWND cb, HWND lb, HWND *arr, HWND lbl);
	static void LoadItem(int id);
	static void LoadField(std::string id);
	static void SaveFields();
	static bool Save(char *filename = 0);
};